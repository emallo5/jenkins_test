apply plugin: 'com.android.application'
android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    defaultConfig {
        applicationId 'com.aparcsystems'
        minSdkVersion 16
        targetSdkVersion 21
        versionName project.VERSION_NAME
    }
    signingConfigs {
        release {
            storeFile file(project.STORE_FILE)
            storePassword project.STORE_PASSWORD
            keyAlias project.KEY_ALIAS
            keyPassword project.KEY_PASSWORD
        }
        debug {
            storeFile file("debug.androidauthorities.keystore")

        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/ASL2.0'
    }


    buildTypes {
        release {
            zipAlignEnabled true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.txt'
            minifyEnabled true
            shrinkResources true
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
    }
    productFlavors {
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // maybe for brightcove videos
    compile 'org.roboguice:roboguice:3.0.1'
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    compile 'com.android.support:appcompat-v7:21.0.+'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    compile 'com.squareup.okio:okio:1.1.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.android.support:recyclerview-v7:21.0.+'
    compile (project(':stripe')){
        exclude module: 'gson'
    }
}
project.dependencies {
    provided 'org.roboguice:roboblender:3.+'
}
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}
android.applicationVariants.all { variant ->

    variant.outputs.each { output ->
        def apk = output.outputFile

        def newName
        if (variant.buildType.debuggable) {
            newName = 'aparc_systems_'+project.VERSION_NAME +'_DEBUG_'+getDate()+ '.apk';
        } else {
            newName = 'aparc_systems_' + project.VERSION_NAME + '_RELEASE' + '.apk';
        }

        //noinspection GroovyAssignabilityCheck
        output.outputFile = new File(apk.parentFile,newName)
    }

}
//It's for zbar .so
task copyNativeLibs(type: Copy) {
    from(new File('libs')) { include '**' }
    into new File(buildDir, 'native-libs')
}
tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }
clean.dependsOn 'cleanCopyNativeLibs'
tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}
